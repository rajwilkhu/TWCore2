<html>
    <head>
        <title>Status</title>
        <script   src="https://code.jquery.com/jquery-1.12.3.min.js"   integrity="sha256-aaODHAgvwQW1bFOGXMeX+pC4PZIPsvn2h1sArYOhgXQ="   crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.12.0/moment.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.12.0/locale/en-gb.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.js"></script>
        <style>
            html, body {
                margin: 0px;
                padding: 0px;
                font-family: Verdana;
                background: #222222;
            }
            h2 {
                font-size: 1.2em;
                padding:0px;
                margin:0px;
            }
            h3 {
                font-size: 0.8em;
                padding:0px;
                margin:0px;
                padding: 0.2em;
                cursor: pointer;
                font-weight:normal;
            }
            .head {
                /*background: rgba(63, 81, 181, 0.04);
                background: #616161;*/
                padding: 0.5em 1em;
                color: #ffffff;
            }

            .head h2 { float:left; }
            .head h3 { float:left; padding-top: 0.4em;}
            .head h3 input { margin:0px; }
            .timestamp {  }
            .headLeft { float:left;}
            #envMachine {
                font-size: 0.8em;
                color: #03a9f4;
            }
            .headRight { float:right;}
            .clear { clear: both; }
            .body {
                padding:0px;
            }
            .statusItem {
                padding-bottom: 0px;
            }
            .statusItem h2 {
                font-size: 12px;
                background: rgb(54, 54, 54);
                padding: 5px 10px;
                cursor: pointer;
                color: #eaeaea;
                border-bottom: 1px solid #222222;
                font-weight: normal;
            }
            .statusItem #count {
                float:right;
                padding-right:0.5em;
            }
            .statusItem table {
                font-size: 0.6em;
                table-layout: fixed;
                word-wrap: break-word;
                padding: 0em;
            }
            .statusItem tr:nth-child(odd) {
                background-color: #616161;
                color: #000000;
            }
            .statusItem tr:nth-child(even) {
                background-color: #363636;
                color: #ccc;
            }
            .statusItem th {
                background: #f5f5f5;
            }
            .statusItem .thKey {
                width:30%
            }
            .statusItem td {
                padding: 4px;
            }
            .statusItem .good {
                color: #13d013;
                font-weight: bold;
            }
            .statusItem .ugly {
                color: #F10B0B;
                font-weight: bold;
            }
            .statusItem .bad {
                color: #DEC927;
                font-weight: bold;
            }
            .statusItem .diff {
                padding-left:0.5em;
                padding-right:0.5em;
            }
            .statusItem .childrens {
            }
            .indent {
                margin: 0px 7px 7px 7px;
                border: solid 1px #363636;
            }
            .indent h2 {
                border-bottom: 0px;
                font-size:11px;
                color: #0faaf2;
            }
            .innerStatus {
                padding: 8px;
            }
            .charts {
                padding: 5px;
                background: #363636;
                border-top: 4px solid #616161;
                border-bottom: 4px solid #616161;
            }
            #chartvar{
                height: 235px;
                overflow-y: auto;
            }
            #chartvarOutter {
                height: 235px;
                width: 35%;
                float: left;
                background: #616161;
                overflow-x: hidden;
                overflow-y: hidden;
                font-size: 15px;
            }
            .chartTitle {
                font-size: 12px;
                font-weight: bold;
                color: #222;
                white-space: nowrap;
            }
            .chartTitle h3 {
                background: #222222;
                color: #01b0df;
                font-size: 10px;
                padding: 5px;
                cursor: default;
            }
            .chartOption {
                padding: 5px 7px;
                /*display:none;*/
                font-size: 10px;
                color: #111;
            }
            .chartOption input {
                float:left;
            }
            .chartOption label {
                display:block;
                float:left;
                padding:0px 5px;
            }
            #myChart {
                width: 61%;
                max-width: 61%;
                height: 200px;
                max-height: 218px;
                float: left;
                margin-left: 1%;
                padding: 0em 0.5em;
                border-radius: 7px;
                background: #222222;
            }
            .tableBtn {
                font-size: 0.6em;
                font-weight: bold;
                cursor: pointer;
                color: #FE5101;
                padding: 5px 5px 2px;
            }
            .wrapStatus{
                display:none;
            }
            .childrens .wrapStatus {

            }
            input[type="radio"] {
                margin:0px;
            }
            #chartTitle {
                text-align: center;
                font-size: 12px;
                color: #01b0df;
                padding: 5px 0px 7px 0px;
            }
        </style>
        <script>
            var statusItem = '<div id="{{ItemId}}" class="statusItem"><h2 id="name"></h2><div class="wrapStatus"><div class="tableBtn">Show/Hide Values</div><div class="innerStatus"></div><div class="childrens"></div></div></div>';
            //var tableItem = '<table><tr><th class="thKey">Key</th><th>Value</th></tr>{{Item.Values}}</table>';
            var tableItem = '<table cellspacing="0">{{Item.Values}}</table>';
            var valueItem = '<tr><td>{{Key}}</td><td class="{{status}}">{{Value}}</td></tr>';
            var tout = null;

            var chartData = {};

            function AddItems(parentElement, items, depth, itemidx, oldItems)
            {
                depth++;
                if (items) {
                    var i;
                    for (i = 0; i < items.length; i++) {
                        var item = items[i];
                        var oldItem = GetItemOnData(oldItems, item.Name);
                        var id = "status" + depth + "_" + itemidx + "_" + i;
                        var chartId = id;//item.Name + " [depth:" + depth + "]";

                        if (!chartData[chartId])
                            chartData[chartId] = {};

                        var chartItem = chartData[chartId];
                        chartItem["Name"] = item.Name;

                        var element = parentElement.children("#" + id);
                        if (element.length == 0) {
                            parentElement.append(statusItem.replace("{{ItemId}}", id));
                            element = parentElement.children("#" + id);
                            $(element).children("h2").on("click", function (sEvt) {
                                $(sEvt.currentTarget).parent().children(".wrapStatus").toggle();
                            });
                        }
                        element.find("#name").html(item.Name);
                        if (depth > 0)
                            element.addClass("indent");
                        else
                            element.removeClass("indent");

                        var iSValues = "";
                        
                        var bAnyValue = false;
                        for (var j = 0; j < item.Values.length; j++) {
                            var val = item.Values[j];
                            var oldVal = GetValueByKey(oldItem, val.Key);
                            //if (val.Key == "Hits")
                            //    debugger;
                            var enablePlot = val.PlotEnabled;
                            if (enablePlot && !chartItem["Values"]) chartItem["Values"] = {};
                            var chartValue = enablePlot? chartItem["Values"] : null;
                            var status = "";
                            if (val.Status == 1) status = "good";
                            if (val.Status == 2) status = "bad";
                            if (val.Status == 3) status = "ugly";
                            var diff = "";
                            if (val.Value) {
                                var nValue = parseFloat(val.Value.replace(",", "."));
                                if (nValue.toString() != "NaN") {
                                    if (enablePlot) {
                                        if (!chartValue[val.Key]) chartValue[val.Key] = [];
                                        if (chartValue[val.Key].length == 25)
                                            chartValue[val.Key].shift();
                                        chartValue[val.Key].push({ label: new Date(), value: nValue });
                                        bAnyValue = true;
                                    }
                                
                                    if (oldVal != null && oldVal.Value != val.Value) {
                                        var oValue = parseFloat(oldVal.Value.replace(",", "."));
                                        if (oValue != NaN && nValue != NaN && oValue != nValue) {
                                            diff = (nValue - oValue).toFixed(2) + "";
                                            if (diff.match(/.00$/))
                                                diff = diff.substring(0, diff.length - 3);
                                        }
                                        if (diff < 0)
                                            diff = '<span class="diff ugly">&nbsp;(' + diff + ')</span>';
                                        if (diff > 0)
                                            diff = '<span class="diff good">&nbsp;(+' + diff + ')</span>';
                                    }
                                }
                                else {
                                    val.Value = val.Value.replace(/(?:\r\n|\r|\n)/g, '<br />');
                                }
                            }
                            iSValues += valueItem.replace("{{Key}}", val.Key).replace("{{Value}}", val.Value + diff).replace("{{status}}", status);
                        }
                        if (item.Values.length > 0) {
                            element.children(".wrapStatus").children(".innerStatus").html(tableItem.replace("{{Item.Values}}", iSValues));
                            $(element).children(".wrapStatus").children(".tableBtn").prop('onclick', null).off('click');
                            $(element).children(".wrapStatus").children(".tableBtn").click(function (sEvt) {
                                $(sEvt.currentTarget).parent().children(".innerStatus").toggle();
                            });
                        }

                        if (!bAnyValue)
                            delete chartData[chartId];

                        if (item.Childrens)
                        {
                            if (item.Childrens.length == 0 || item.Values.length == 0)
                                $(element).children(".wrapStatus").children(".tableBtn").remove();
                            else if (!$(element).children(".wrapStatus").children(".innerStatus").data("init")) {
                                $(element).children(".wrapStatus").children(".innerStatus").show();
                                $(element).children(".wrapStatus").children(".innerStatus").data("init", true);
                            }

                            if (item.Childrens.length == 0 && item.Values.length == 0) {
                                $(element).children("h2").off("click");
                                $(element).children("h2").css("cursor", "default");
                                $(element).children("h2").css("background-color", "#222222");
                                $(element).children("h2").css("font-size", "0.6em");
                                $(element).children("h2").css("font-weight", "normal");
                                $(element).children("h2").css("border-bottom", "0px");
                            }

                            if (oldItem)
                                AddItems(element.children(".wrapStatus").children(".childrens"), item.Childrens, depth, itemidx + "_" + i, oldItem.Childrens);
                            else
                                AddItems(element.children(".wrapStatus").children(".childrens"), item.Childrens, depth, itemidx + "_" + i, null);
                        }
                        else
                            $(element).children(".wrapStatus").children(".tableBtn").remove();
                    }

                    var sItemsLength = parentElement.children(".statusItem").length;
                    for (i = items.length; i < sItemsLength; i++)
                        parentElement.children("#status" + depth + "_" + itemidx + "_" + i).remove();
                }
            }
            var chartValueId = "";

            function displayChart() {
                if (chartValueId) {

                    var dArr = chartValueId.split("$");
                    var cValues = chartData[dArr[0]].Values[dArr[1]];
                    mChartData.labels = [];
                    mChartData.datasets[0].data = [];
                    var initial = 0;
                    if (cValues.length > 0) initial = cValues[0].value;
                    if (cValues.length < 25)
                        cValues = new Array(25 - cValues.length).fill({ label: parseInt(initial), value: initial }).concat(cValues);
                    for (var i = 0; i < cValues.length; i++) {
                        var item = cValues[i];
                        mChartData.labels.push(parseInt(item.value));
                        mChartData.datasets[0].data.push(item.value);
                    }
                    $("#myChart").attr("style", "");
                    myNewChart = new Chart(ctx).Line(mChartData, { });
                }
            }

            var statuses = [null, null];
            function retrieveData() {
                $.ajax({ url: "/json", cache: false }).done(function (data) {
                    statuses[0] = statuses[1];
                    statuses[1] = data;

                    if (data.ApplicationDisplayName) {
                        $("#appName").html(data.ApplicationDisplayName + " (" + data.ApplicationName + ")");
                        document.title = "Status: " + data.ApplicationDisplayName + " (" + data.ApplicationName + ")";
                    } else {
                        $("#appName").html(data.ApplicationName);
                        document.title = "Status: " + data.ApplicationName;
                    }
                    $("#envMachine").html(data.EnvironmentName + " - " + data.MachineName);

                    var date = moment(new Date(data.Timestamp));
                    $(".timestamp").html(date.format('dddd, D MMMM YYYY HH:mm:ss'));
                    
                    if (statuses[0])
                        AddItems($(".body"), data.Items, -1, "", statuses[0].Items);
                    else
                        AddItems($(".body"), data.Items, -1, "", null);

                    

                    for (var cData in chartData)
                    {
                        var cDataDiv = $("#chartvar div[id*='" + cData + "']");
                        if (cDataDiv.length == 0) {
                            $("#chartvar").append("<div id='" + cData + "' class='chartTitle'><h3>" + chartData[cData].Name + "</h3></div>");
                            cDataDiv = $("#chartvar div[id*='" + cData + "']");

                            for (var cVal in chartData[cData].Values) {
                                var cInput = cDataDiv.find("input[id*='" + cData + "$" + cVal + "']");
                                if (cInput.length == 0) {
                                    cDataDiv.append("<div class='chartOption'><input id='" + cData + "$" + cVal + "' type='radio' name='chartVar' value='" + cVal + "' /><label for='" + cData + "$" + cVal + "'>" + cVal + "</label><div style='clear:both;'></div></div>");
                                    cInput = cDataDiv.find("input[id*='" + cData + "$" + cVal + "']");

                                    cInput.click(function (sEvt) {
                                        var target = $(sEvt.currentTarget);
                                        chartValueId = target.attr("id");
                                        $(chartTitle).text(target.next().text());
                                        displayChart();
                                    });
                                }
                            }
                        }
                    }
                    $("#chartvar h3").prop('onclick', null).off('click');
                    //$("#chartvar h3").click(function (evt) { $(evt.currentTarget).parent().children(".chartOption").toggle(); });

                    if (chartValueId == "") {
                        var firstH3 = $("#chartvar h3").first();
                        firstH3.click();
                        firstH3.next().find("input").click()
                    }
                    displayChart();
                }).always(function () {
                    if (tout)
                        clearTimeout(tout);
                    if ($("#chkRefresh").prop("checked"))
                        tout = setTimeout(retrieveData, 2500);
                });
            }
            $(function () {
                $("#btnReload").click(retrieveData);
                $("#chkRefresh").click(function() {
                    if ($("#chkRefresh").prop("checked"))
                        retrieveData();
                    else
                        if (tout)
                            clearTimeout(tout);
                });
            });
            retrieveData();

            function GetItemOnData(items, name) {
                if (items)
                    for (var i = 0; i < items.length; i++)
                        if (items[i].Name == name)
                            return items[i];
            }
            function GetValueByKey(item, key) {
                if (item)
                    for (var i = 0; i < item.Values.length; i++)
                        if (item.Values[i].Key == key)
                            return item.Values[i];
            }
        </script>
    </head>
    <body>
        <div class="head">
            <div class="headLeft">
                <h2 id="appName">Test</h2>
                <div id="envMachine" class="clear">Test</div>
            </div>
            <div class="headRight">
                <div class="timestamp"></div>
                <h3 id="btnReload">Reload data </h3>
                <h3>|</h3>
                <h3><input type="checkbox" id="chkRefresh" value="1" checked/><label for="chkRefresh">&nbsp;Automatic Update</label></h3>
            </div>
            <div class="clear"></div>
        </div>
        <div class="charts">
            <div id="chartvarOutter">
                <div id="chartvar"></div>
            </div>
            <div id="chartTitle">WorkingSet</div>
            <canvas id="myChart"></canvas>
            <div class="clear"></div>
        </div>
        <div class="body">
        </div>
        <script>
            var ctx = document.getElementById("myChart").getContext("2d");
            var mChartData = {
                labels: [],
                datasets: [
                    {
                        fillColor: "rgba(79, 177, 255, 0.25)",
                        strokeColor: "#03a9f4",
                        pointColor: "#01b0df",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(151,187,205,1)",
                        data: []
                    }
                ]
            };
            Chart.defaults.global.animation = false;
            Chart.defaults.global.showTooltips = false;
            //Chart.defaults.global.scaleBeginAtZero = true;
            //Chart.defaults.global.scaleLabel = "";
            var myNewChart = new Chart(ctx).Line(mChartData, { pointDot: false, datasetStroke: false });
        </script>
    </body>
</html>