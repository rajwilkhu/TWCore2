@{
    ViewData["Title"] = "TWCore Object Viewer";
}

<div id="viewport">
    <div id="head">
        TWCore Object Viewer
    </div>
    <div id="body">
        <div id="fileMenu" class="k-content">
            <div id="toolbar"></div>
            <ul id="fileView"></ul>
        </div>
        <div id="objectPanel">
            <div id="description">
                <div id="descriptionHeader"></div>
                <div id="descriptionContent">
                    <div id="textContent"></div>
                    <div id="descriptionInner"></div>
                </div>
            </div>
            <div id="code">
                <div id="codeToolbar"></div>
                <textarea id="editor"></textarea>
            </div>
        </div>
    </div>
    <span id="popupNotification"></span>

    <script id="description-template" type="text/x-kendo-template">
        <div class='description-name #:data.member#'>#: name #</div>
    </script>
    
    

    

    <script>
        var apiUrl = "/api/";
        var snippets = [
            'using TWCore;\nusing TWCore.Object.Compiler;\nusing System;\n\nnamespace Runtime\n{\n\
    public class RuntimeCode : IRuntimeCode\n\
    {\n\
        public object Execute(object value)\n\
        {\n\
            return value;\n\
        }\n\
    }\n}\n',
            'using TWCore;\nusing TWCore.Object.Compiler;\nusing TWCore.Serialization;\nusing System;\n\nnamespace Runtime\n{\n\
    public class RuntimeCode : IRuntimeCode\n\
    {\n\
        public object Execute(object value)\n\
        {\n\
            return value.SerializeToXml();\n\
        }\n\
    }\n}\n',
            'using TWCore;\nusing TWCore.Object.Compiler;\nusing TWCore.Serialization;\nusing System;\n\nnamespace Runtime\n{\n\
    public class RuntimeCode : IRuntimeCode\n\
    {\n\
        public object Execute(object value)\n\
        {\n\
            JsonTextSerializerExtensions.Serializer.Indent = true;\n\
            return value.SerializeToJson();\n\
        }\n\
    }\n}\n',
            'using TWCore;\nusing TWCore.Object.Compiler;\nusing System;\nusing System.Text;\n\nnamespace Runtime\n{\n\
    public class RuntimeCode : IRuntimeCode\n\
    {\n\
        public object Execute(object value)\n\
        {\n\
            return Encoding.UTF8.GetString((byte[])value);\n\
        }\n\
    }\n}\n',
            'using TWCore;\nusing TWCore.Object.Compiler;\nusing System;\nusing System.Xml.Linq;\n\nnamespace Runtime\n{\n\
    public class RuntimeCode : IRuntimeCode\n\
    {\n\
        public object Execute(object value)\n\
        {\n\
            var doc = XDocument.Parse((string)value);\n\
            return doc.ToString();\n\
        }\n\
    }\n}\n',
        ];

        $(document).ready(function () {
            var fileListUrl = apiUrl + "files/list.json";
            var currentFilePath = null;
            var currentFilter = null;
            var popupNotification = $("#popupNotification").kendoNotification().data("kendoNotification");
            var expandedNodes = {};
            var selectedNode = null;

            var snippetClick = function(item) {
                var value = snippets[item.id];
                editor.setValue(value);
            };

            var fileRefresh = function() {
                fileDataSource.read().then(function() {
                    var nodesToExpand = [];
                    for (var i in expandedNodes) nodesToExpand.push(i);
                    var tree = $('#fileView').data('kendoTreeView');
                    tree.expandPath(nodesToExpand, function () {
                        if (selectedNode) {
                            var item = fileDataSource.get(selectedNode);
                            if (!item) return;
                            var node = tree.findByUid(item.uid);
                            if (node != null)
                                tree.select(node);
                        }
                    });
                });
            }

            var fileUnload = function() {
                $.ajax({
                    url: apiUrl + "files/unload.json",
                    dataType: 'json',
                    crossDomain: true,
                    xhrFields: {
                        withCredentials: true
                    },
                    success: function (data) {
                        currentFilePath = null;
                        $("#descriptionHeader").text("");
                        $("#descriptionHeader").hide();
                        $("#textContent").hide();
                        var ktl = $("#descriptionInner").data("kendoTreeList");
                        if (ktl) {
                            ktl.destroy();
                            $("#descriptionInner").empty();
                        }
                    }
                });
            }
            
            var fileFilter = function() {
                kendo.prompt("Enter the filter value for the file name.", currentFilter).then(function (data) {
                    currentFilter = data;
                    fileRefresh();
                }, function () {
                })
            }

            var fileReload = function() {
                $.ajax({
                    url: apiUrl + "code/get.json",
                    dataType: 'json',
                    crossDomain: true,
                    xhrFields: {
                        withCredentials: true
                    },
                    success: function (data) {
                        editor.setValue(data);

                        $.ajax({
                            url: apiUrl + "files/status.json",
                            dataType: 'json',
                            crossDomain: true,
                            xhrFields: {
                                withCredentials: true
                            },
                            success: function (data) {
                                if (data.loaded) {
                                    currentFilePath = data.filePath;
                                    compileAndRun();
                                }
                            }
                        });

                    }
                });            
            }

            var compileAndRun = function () {
                popupNotification.show(" Compiling and running source code...", "info");
                $.ajax({
                    url: apiUrl + "code/set.json",
                    contentType: "application/json",
                    type: "POST",
                    dataType: 'json',
                    crossDomain: true,
                    xhrFields: {
                        withCredentials: true
                    },
                    data: JSON.stringify(editor.getValue()),
                    success: function (data) {
                        editor.setValue(data);

                        $.ajax({
                            url: apiUrl + "code/compile.json",
                            dataType: 'json',
                            crossDomain: true,
                            xhrFields: {
                                withCredentials: true
                            },
                            success: function (data) {
                                popupNotification.show(" Results loaded.", "info");
                                $("#textContent").hide();
                                var ktl = $("#descriptionInner").data("kendoTreeList");
                                if (ktl) {
                                    ktl.destroy();
                                    $("#descriptionInner").empty();
                                }

                                if (!data) return;
                                if (data.exceptionType) {
                                    kendo.alert(data.message);
                                    return;
                                }
                                $("#descriptionHeader").text(currentFilePath);
                                $("#descriptionHeader").show();
                                if (data.length > 0 && data[0].type == "System.String") {
                                    textContent.setValue(data[0].value);
                                    var setted = false;
                                    if (currentFilePath) {
                                        var info = CodeMirror.findModeByExtension(currentFilePath.split('.').reverse()[0]);
                                        if (info) {
                                            textContent.setOption("mode", info.mime);
                                            CodeMirror.autoLoadMode(textContent, info.mode);
                                            setted = true;
                                        }
                                    }
                                    if (!setted) {
                                        if (data[0].value.startsWith("<?xml")) {
                                            var info = CodeMirror.findModeByExtension("xml");
                                            textContent.setOption("mode", info.mime);
                                            CodeMirror.autoLoadMode(textContent, info.mode);
                                        }
                                        if (data[0].value.startsWith("{")) {
                                            var info = CodeMirror.findModeByExtension("json");
                                            textContent.setOption("mode", info.mime);
                                            CodeMirror.autoLoadMode(textContent, info.mode);
                                        }
                                    }

                                    $("#textContent").show();
                                    textContent.refresh();
                                }
                                else {
                                    data = data.slice(0, 2500);
                                    $("#descriptionInner").kendoTreeList({
                                        dataSource: {
                                            data: data,
                                            schema: {
                                                model: { id: "id", expanded: false }
                                            }
                                        },
                                        selectable: true,
                                        resizable: true,
                                        columns: [
                                            { field: "name", title: "Name", template: $("#description-template").html() },
                                            { field: "value", title: "Value" },
                                            { field: "type", title: "Type" }
                                        ]
                                    });
                                    var descriptionInner = $("#descriptionInner").data("kendoTreeList");
                                    descriptionInner.expand($("#descriptionInner tbody>tr:eq(0)"));
                                }
                            }
                        });

                    }
                });
            }



            $("#body").kendoSplitter({
                panes: [
                    { collapsible: true, size: "350px" },
                    { collapsible: false, min: "30%" },
                ],
                resize: function () {
                    if (editor) editor.refresh();
                    if (textContent) textContent.refresh();
                }
            });

            $("#objectPanel").kendoSplitter({
                orientation: "vertical",
                panes: [
                    { collapsible: true },
                    { collapsible: true, size:"370px" },
                ],
                resize: function () {
                    if (editor) editor.refresh();
                    if (textContent) textContent.refresh();
                }
            });
            $("#codeToolbar").kendoToolBar({
                items: [
                    { type: "button", text: "Run", overflow: "never", spriteCssClass: "Run", click: function () { compileAndRun() } },
                    { type: "splitButton", text:"Snippets", overflow: "never", spriteCssClass:"Snnipet", menuButtons: [
                            { id: 0, text: "Bypass the value", spriteCssClass: "CSharp", click : snippetClick }, 
                            { id: 1, text: "Serialize to XML", spriteCssClass: "CSharp", click : snippetClick },
                            { id: 2, text: "Serialize to Json", spriteCssClass: "CSharp", click: snippetClick },
                            { id: 3, text: "Get UTF8 string from byte array", spriteCssClass: "CSharp", click: snippetClick },
                            { id: 4, text: "Format XML string", spriteCssClass: "CSharp", click : snippetClick }
                        ] 
                    }
                ]
            });
            $("#toolbar").kendoToolBar({
                items: [
                    { type: "button", text: "Refresh", overflow: "never", spriteCssClass: "Refresh", click: fileRefresh },
                    { type: "button", text: "Unload", overflow: "never", spriteCssClass: "Unload", click: fileUnload },
                    { type: "separator", overflow: "never" },
                    { type: "button", text: "Filter", overflow: "never", spriteCssClass: "Filter", click : fileFilter },
                ]
            });
            
            CodeMirror.modeURL = "mode/%N/%N.js";
            var editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
                theme: 'lesser-dark',
                lineNumbers: true,
                styleActiveLine: true,
                matchBrackets: true,
                autoCloseBrackets: true,
                foldGutter: true,
                dragDrop: false,
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
                extraKeys: {"Alt-F": "findPersistent"}
            });
            var info = CodeMirror.findModeByExtension("cs")
            editor.setOption("mode", info.mime);
            CodeMirror.autoLoadMode(editor, info.mode);

            var textContent = CodeMirror(document.getElementById("textContent"), {
                theme: 'icecoder',
                lineNumbers: true,
                styleActiveLine: true,
                matchBrackets: true,
                autoCloseBrackets: true,
                foldGutter: true,
                dragDrop: false,
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
                extraKeys: {"Alt-F": "findPersistent"}
            });
            var info = CodeMirror.findModeByExtension("xml")
            textContent.setOption("mode", info.mime);
            CodeMirror.autoLoadMode(textContent, info.mode);
            $("#textContent").hide();
            $("#descriptionHeader").hide();

            var fileDataSource = new kendo.data.HierarchicalDataSource({
                transport: {
                    read: {
                        url: function (options) {
                            if (options.name)
                                return fileListUrl + "?path=" + options.name + (currentFilter ? "&filter=" + currentFilter : "");
                            else
                                return fileListUrl + (currentFilter ? "?filter=" + currentFilter : "");
                        },
                        dataType: "json"
                    }
                },
                schema: {
                    data: function (response) {
                        if (response.exceptionType) {
                            kendo.alert(response.message);
                            return null;
                        }
                        for (var i = 0; i < response.entries.length > 0; i++) {
                            var entry = response.entries[i];
                            entry.isDirectory = entry.type == "Directory";
                            entry.path = response.current + entry.name;
                            if (entry.name.substring(0, 1) == "\\" || entry.name.substring(0, 1) == "/")
                                entry.name = entry.name.substring(1);
                            entry.spriteCssClass = entry.isDirectory ? "folder" : entry.isBinary ? "file" : "text";
                        }
                        return response.entries;
                    },
                    model: {
                        id: "path",
                        hasChildren: "isDirectory"
                    }
                },
                change: function() {
                    
                }
            });

            $("#fileView").kendoTreeView({
                dataSource: fileDataSource,
                dataTextField: "name",
                animation: false,
                select: function (e) {
                    var tree = $('#fileView').data('kendoTreeView');
                    var dataItem = tree.dataItem(e.node);
                    selectedNode = dataItem.id;
                    if (dataItem.isDirectory) return;
                    currentFilePath = dataItem.path;
                    $.ajax({
                        url: apiUrl + "files/load.json?path=" + dataItem.path,
                        dataType: 'json',
                        crossDomain: true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: function (result) {
                            if (result.exceptionType) {
                                kendo.alert(result.message);
                                return;
                            }
                            if (result.loaded) {
                                popupNotification.show(" File: " + dataItem.name + " was loaded.", "info");
                                compileAndRun();
                            }
                            else {
                                kendo.alert("Error loading file.");
                            }
                        }
                    });
                },
                expand : function(e) {
                    var tree = $('#fileView').data('kendoTreeView');
                    var dataItem = tree.dataItem(e.node);
                    expandedNodes[dataItem.id] = true;
                },
                collapse : function(e) {
                    var tree = $('#fileView').data('kendoTreeView');
                    var dataItem = tree.dataItem(e.node);
                    expandedNodes[dataItem.id] = false;
                    delete expandedNodes[dataItem.id];
                }
            });

            fileReload();

            addOnDropFileHandler(function(file, value) {
                popupNotification.show(" Uploading: " + file + " ...", "info");

                $.ajax({
                    url: apiUrl + "files/upload.json?name=" + file,
                    contentType: "application/octet-stream",
                    type: "POST",
                    dataType: 'json',
                    data: value,
                    processData: false,
                    crossDomain: true,
                    xhrFields: {
                        withCredentials: true
                    },
                    success: function (result) {
                        if (result.exceptionType) {
                            kendo.alert(result.message);
                            return;
                        }
                        if (result.loaded) {
                            popupNotification.show(" File: " + file + " was loaded.", "info");
                            $.ajax({
                                url: apiUrl + "files/status.json",
                                dataType: 'json',
                                crossDomain: true,
                                xhrFields: {
                                    withCredentials: true
                                },
                                success: function (data) {
                                    if (data.loaded) {
                                        currentFilePath = data.filePath;
                                        compileAndRun();
                                    }
                                }
                            });
                        }
                        else {
                            kendo.alert("Error loading file.");
                        }
                    }
                });
            });
        });
    </script>

</div>

