@{
    ViewData["Title"] = "TWCore Object Viewer";
}

<div id="viewport">
    <div id="head">
        TWCore Object Viewer
    </div>
    <div id="body">
        <div id="fileMenu" class="k-content">
            <ul id="fileView"></ul>
        </div>
        <div id="objectPanel">
            <div id="description">
                <div id="descriptionHeader"></div>
                <div id="descriptionContent">
                    <div id="textContent"></div>
                    <div id="descriptionInner"></div>
                </div>
            </div>
            <div id="code">
                <div id="codeToolbar"></div>
                <textarea id="editor"></textarea>
            </div>
        </div>
    </div>
    <span id="popupNotification"></span>

    <script id="description-template" type="text/x-kendo-template">
        <div class='description-name #:data.member#'>#: name #</div>
    </script>
    
    

    

    <script>
        var apiUrl = "/api/";
        $(document).ready(function () {
            $("#body").kendoSplitter({
                panes: [
                    { collapsible: true, size: "300px" },
                    { collapsible: false, min: "30%" },
                ],
                resize: function () {
                    if (editor) editor.refresh();
                    if (textContent) textContent.refresh();
                }
            });
            $("#objectPanel").kendoSplitter({
                orientation: "vertical",
                panes: [
                    { collapsible: true },
                    { collapsible: true, size:"300px" },
                ],
                resize: function () {
                    if (editor) editor.refresh();
                    if (textContent) textContent.refresh();
                }
            });
            $("#codeToolbar").kendoToolBar({
                items: [
                    { type: "button", overflow: "never", spriteCssClass: "Run", click: function () { compileAndRun() } }
                ]
            });
            CodeMirror.modeURL = "mode/%N/%N.js";
            var editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
                theme: 'lesser-dark',
                lineNumbers: true,
                styleActiveLine: true,
                matchBrackets: true,
                autoCloseBrackets: true,
                foldGutter: true,
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
                extraKeys: {"Alt-F": "findPersistent"}
            });
            var info = CodeMirror.findModeByExtension("cs")
            editor.setOption("mode", info.mime);
            CodeMirror.autoLoadMode(editor, info.mode);

            var textContent = CodeMirror(document.getElementById("textContent"), {
                theme: 'icecoder',
                lineNumbers: true,
                styleActiveLine: true,
                matchBrackets: true,
                autoCloseBrackets: true,
                foldGutter: true,
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
                extraKeys: {"Alt-F": "findPersistent"}
            });
            var info = CodeMirror.findModeByExtension("xml")
            textContent.setOption("mode", info.mime);
            CodeMirror.autoLoadMode(textContent, info.mode);
            $("#textContent").hide();
            $("#descriptionHeader").hide();

            var popupNotification = $("#popupNotification").kendoNotification().data("kendoNotification");

            var fileListUrl = apiUrl + "files/list.json";
            var fileDataSource = new kendo.data.HierarchicalDataSource({
                transport: {
                    read: {
                        url: function (options) {
                            if (options.name)
                                return fileListUrl + "?path=" + options.name;
                            else
                                return fileListUrl;
                        },
                        dataType: "json"
                    }
                },
                schema: {
                    data: function (response) {
                        for (var i = 0; i < response.entries.length > 0; i++) {
                            var entry = response.entries[i];
                            entry.isDirectory = entry.type == "Directory";
                            entry.path = response.current + entry.name;
                            if (entry.name.substring(0, 1) == "\\" || entry.name.substring(0, 1) == "/")
                                entry.name = entry.name.substring(1);
                            entry.spriteCssClass = entry.isDirectory ? "folder" : entry.isBinary ? "file" : "text";
                        }
                        return response.entries;
                    },
                    model: {
                        id: "path",
                        hasChildren: "isDirectory"
                    }
                }
            });

            var currentFilePath = null;

            $("#fileView").kendoTreeView({
                dataSource: fileDataSource,
                dataTextField: "name",
                select: function (e) {
                    e.preventDefault();
                    var tree = $('#fileView').data('kendoTreeView');
                    var dataItem = tree.dataItem(e.node)
                    if (dataItem.isDirectory) return;
                    currentFilePath = dataItem.path;
                    $.ajax({
                        url: apiUrl + "files/load.json?path=" + dataItem.path,
                        dataType: 'json',
                        crossDomain: true,
                        xhrFields: {
                            withCredentials: true
                        },
                        success: function (result) {
                            if (result.loaded) {
                                popupNotification.show(" File " + dataItem.path + " was loaded.", "info");
                                compileAndRun();
                            }
                            else {
                                kendo.alert("Error loading file.");
                            }
                        }
                    });
                }
            });

            var compileAndRun = function () {
                popupNotification.show(" Compiling and running source code...", "info");
                $.ajax({
                    url: apiUrl + "code/set.json",
                    contentType: "application/json",
                    type: "POST",
                    dataType: 'json',
                    crossDomain: true,
                    xhrFields: {
                        withCredentials: true
                    },
                    data: JSON.stringify(editor.getValue()),
                    success: function (data) {
                        editor.setValue(data);

                        $.ajax({
                            url: apiUrl + "code/compile.json",
                            dataType: 'json',
                            crossDomain: true,
                            xhrFields: {
                                withCredentials: true
                            },
                            success: function (data) {
                                console.log(data);
                                popupNotification.show(" Results loaded.", "info");
                                $("#textContent").hide();
                                var ktl = $("#descriptionInner").data("kendoTreeList");
                                if (ktl) {
                                    ktl.destroy();
                                    $("#descriptionInner").empty();
                                }

                                if (!data) return;
                                if (data.exceptionType) {
                                    kendo.alert("Error on the compiler:  " + data.message);
                                    return;
                                }
                                $("#descriptionHeader").text(currentFilePath);
                                $("#descriptionHeader").show();
                                if (data.length > 0 && data[0].type == "System.String") {
                                    textContent.setValue(data[0].value);
                                    var setted = false;
                                    if (currentFilePath) {
                                        var info = CodeMirror.findModeByExtension(currentFilePath.split('.').reverse()[0]);
                                        if (info) {
                                            textContent.setOption("mode", info.mime);
                                            CodeMirror.autoLoadMode(textContent, info.mode);
                                            setted = true;
                                        }
                                    }
                                    if (!setted) {
                                        if (data[0].value.startsWith("<?xml")) {
                                            var info = CodeMirror.findModeByExtension("xml");
                                            textContent.setOption("mode", info.mime);
                                            CodeMirror.autoLoadMode(textContent, info.mode);
                                        }
                                        if (data[0].value.startsWith("{")) {
                                            var info = CodeMirror.findModeByExtension("json");
                                            textContent.setOption("mode", info.mime);
                                            CodeMirror.autoLoadMode(textContent, info.mode);
                                        }
                                    }

                                    $("#textContent").show();
                                    textContent.refresh();
                                }
                                else {
                                    $("#descriptionInner").kendoTreeList({
                                        dataSource: {
                                            data: data,
                                            schema: {
                                                model: { id: "id", expanded: false }
                                            }
                                        },
                                        selectable: true,
                                        resizable: true,
                                        columns: [
                                            { field: "name", title: "Name", template: $("#description-template").html() },
                                            { field: "value", title: "Value" },
                                            { field: "type", title: "Type" }
                                        ]
                                    });
                                }
                            }
                        });

                    }
                });
            }

            $.ajax({
                url: apiUrl + "code/get.json",
                headers: { 'Cookie': document.cookie },
                dataType: 'json',
                crossDomain: true,
                xhrFields: {
                    withCredentials: true
                },
                success: function (data) {
                    console.log(data);
                    editor.setValue(data);
                }
            });
        });
    </script>


    <style>
        html, body {
            margin: 0 0;
            padding: 0 0;
            overflow: hidden;
            font-family: 'Roboto', sans-serif;
            font-size: 0.9em;
            border-width: 0px;
        }

        #viewport {
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        #head {
            background-color: #222222;
            color: #ffffff;
            padding: 15px;
            font-family: 'Roboto', sans-serif;
            font-size: 2em;
            background-image: url("images/CSWPFWeb_32x.png");
            background-repeat: no-repeat;
            padding-left: 64px;
            background-size: 32px;
            background-position-y: center;
            background-position-x: 20px;
        }

        #body {
            height: 100%;
            padding: 0px;
            margin: 0px;
            border-width: 0px;
        }

        #fileMenu {
            display: flex;
            flex-direction: column;
            font-size: 1em;
            background-color: #222;
        }

        #objectPanel {
            padding: 0px;
            margin: 0px;
            overflow: hidden;
            border-width: 0px;
            border-top-width: 1px;
        }

        #fileView {
            position: absolute;
            padding: 10px;
            top: 0px;
            bottom: 0px;
        }
        #code {
            font-size: 1.2em;
            display: flex;
            flex-direction: column;
        }
        #codeToolbar {
            font-size: 0.8em;
            background-image: none;
            line-height: 2.5;
            height: 37px;
            border-width: 0px;
            background-color: #363636;
            padding: 0px 2px;
        }
        #description {
            overflow: hidden;
        }
        #descriptionInner{
            border-width: 0;
            margin: 0;
            padding: 0;
            height: 100%;
        }
        #textContent {
            height: 100%;
            font-size:1.2em;
        }
        #editor {
            position: absolute;
            color: #ffffff;
            background-color: transparent;
            font-family: Courier New;
            width: 97%;
            height: 91.5%;
            border: solid 0px;
            resize: none;
            padding: 15px;
        }
        #descriptionHeader {
            padding: 5px;
            text-align: center;
            border-bottom: solid 1px #222;
            position: absolute;
            top: 0px;
            left: 0px;
            right: 0px;
            height: 26px;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }
        #descriptionContent {
            position: absolute;
            bottom: 0px;
            left: 0px;
            right: 0px;
            top: 26px;
        }
        #fileView .k-sprite {
        }

        .folder {
            background-image: url("images/Folder_16x.png");
        }

        .file {
            background-image: url("images/Mail_16x.png");
        }
        .text {
            background-image: url("images/MarkupTag_16x.png");
        }

        .description-name {
            width: 16px;
            height: 16px;
            padding-left: 22px;
            background-repeat: no-repeat;
            display: inline;
        }

        .Field {
            background-image: url("images/Field_16x.png");
        }
        .Property {
            background-image: url("images/Property_20x.png");
        }
        .Method {
            background-image: url("images/Method_16x.png");
        }
        .Object {
            background-image: url("images/Object_16x.png");
        }
        .Run {
            background-image: url("images/Run_16x.png");
        }
        .k-grid td {
            border-width: 0 0 1px 1px;
            padding: .1em .4em;
            line-height: 1.5em;
        }
        .k-grid tr:hover {
            background-image: none;
            background: #616161;
        }
        .k-treelist .k-alt.k-state-selected, .k-treelist .k-alt.k-state-selected>td, .k-treelist .k-state-selected, .k-treelist .k-state-selected td {
            background-color: #312fb7;
            border-color: #242486;
        }

        .CodeMirror {
            height: 100%;
        }
    </style>
</div>

